# Create a ggplot using the aggregated data
ggplot() +
geom_polygon(data = nyc_map, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_segment(data = df_aggregated, aes(x = org_long,
y = org_lat,
xend = dest_long,
yend = dest_lat,
color = count), size = 2) +
scale_color_gradient(low = "blue", high = "red", guide = "legend") +
coord_fixed(1.3) +
labs(x = "Longitude", y = "Latitude", title = "Routes in NYC and their counts") +
xlim(x_min, x_max) +
ylim(y_min, y_max)
# vehicle name table
tab_vname <- table(df$vech_name)
# Convert to dataframe for plotting
df_vehicle_name <- as.data.frame(tab_vname)
head(df_vehicle_name)
# Rename the columns
names(df_vehicle_name) <- c("vehicle_name", "count")
# sort using count
df_vehicle_name <- df_vehicle_name[order(-df_vehicle_name$count), ]
# Reset the row names
rownames(df_vehicle_name) <- NULL
# Get total unique vehicle name
cat("Total unique vehicle name:", (nrow(df_vehicle_name)), "\n")
# Get average count of each vehicle name
avg_vehicle_count <- mean(df_vehicle_name$count)
cat("Average line counts:", avg_vehicle_count, "\n")
# get top 20 vehicle name
(top_vehicle_df <- df_vehicle_name[1:20, ])
# visualize top-20 vehicle name
ggplot(top_vehicle_df, aes(x = reorder(vehicle_name, -count), y = count, fill = vehicle_name)) +
geom_bar(stat = "identity") +
labs(title = "Top 20 Orign/Start Station Names by Count", x = "Origin Name", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x labels for readability
legend.position = "none")  # Remove the legend
# calculate the percentage of top-20 frequent vehicle name
top_vehicle_count_percentage <- sum(top_vehicle_df$count) / sum(df_vehicle_name$count) * 100
cat("Top 20 vehicle's frequency percentage:", top_vehicle_count_percentage, "%\n")
# visualize the counts of each origin with respect to their indices
plot(df_vehicle_name$count,
xlab = "Vehicle Number",
ylab = "Count",
main = "Distribution of Counts")
# Add a horizontal green line at the mean count
abline(h = avg_vehicle_count, col = "darkgreen", lwd = 2)
# Find the first index where count is less than the average
first_index <- which(df_vehicle_name$count < avg_vehicle_count)[1]
# Add 'X' mark at the first such index on the average line
if (!is.na(first_index)) {
points(first_index, avg_vehicle_count, pch = "X", col = "darkorange", lwd = 3)
# Add a dashed vertical line through the 'X' point
abline(v = first_index, lty = "dashed", col = "darkred", lwd=2)
# Calculate the y-position for the text label
y_position <- par("usr")[3] - 0.15
x_position = first_index + 20
# Add text label for the X-axis value
text(x_position, y_position, labels = first_index, srt = 00, adj = 1, xpd = TRUE, col = "darkblue")
}
# weekend status table
tab_ws <- table(df$weekend_status)
# Convert to dataframe for plotting
df_ws <- as.data.frame(tab_ws)
head(df_ws)
# Rename the columns
names(df_ws) <- c("weekend_status", "count")
# sort using count
df_ws <- df_ws[order(-df_ws$count), ]
# Reset the row names
rownames(df_ws) <- NULL
# Calculate the percentage for each group
df_ws <- df_ws %>%
group_by(weekend_status) %>%
summarise(total_count = sum(count)) %>%
mutate(percentage = (total_count / sum(total_count)) * 100)
# Create the bar plot with percentage labels
ggplot(df_ws, aes(x = reorder(weekend_status, -percentage), y = total_count, fill = weekend_status)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(percentage, 2), "%")), vjust = -0.5, size = 4) +  # Add percentage labels
labs(title = "Top 20 Origin/Start Station Names by Count and Percentage",
x = "Origin Name",
y = "Count") +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5),  # Reset X-axis text position to default
legend.position = "none")  # Remove the legend
boxplot(df$day_of_year,
main = "Distribution of Day of the Year",
ylab = "day of year")
# Add the mean to the boxplot
points(1, mean(df$day_of_year), col = "red", pch = 19)
boxplot(df$day_of_year,
main = "Distribution of Day of the Year",
ylab = "day of year")
# Add the mean to the boxplot
points(1, mean(df$day_of_year), col = "red", pch = 19)
text(1.05, mean(df$day_of_year), labels = round(mean(df$day_of_year), 2), col = "red")
# Calculate quantiles
quantiles <- quantile(df$day_of_year, probs = c(0.25, 0.75))
# Add quantiles to the boxplot
segments(0.8, quantiles[1], 1.2, quantiles[1], col = "blue")
segments(0.8, quantiles[2], 1.2, quantiles[2], col = "blue")
# Annotate quantiles
text(1.25, quantiles[1], labels = round(quantiles[1], 2), col = "blue")
text(1.25, quantiles[2], labels = round(quantiles[2], 2), col = "blue")
boxplot(df$day_of_year,
main = "Distribution of Day of the Year",
ylab = "day of year")
# Add the mean to the boxplot
points(1, mean(df$day_of_year), col = "red", pch = 19)
text(1.05, mean(df$day_of_year), labels = round(mean(df$day_of_year), 2), col = "red")
# Calculate quantiles
quantiles <- quantile(df$day_of_year, probs = c(0.25, 0.75))
# Add quantiles to the boxplot
segments(0.8, quantiles[1], 1.2, quantiles[1], col = "blue")
segments(0.8, quantiles[2], 1.2, quantiles[2], col = "blue")
# Annotate quantiles
text(1.25, quantiles[1], labels = round(quantiles[1], 2), col = "blue")
text(1.25, quantiles[2], labels = round(quantiles[2], 2), col = "blue")
boxplot(df$time_of_day,
main = "Distribution of time of the day",
ylab = "day of year")
# Add the mean to the boxplot
points(1, mean(df$time_of_day), col = "red", pch = 19)
text(1.09, mean(df$time_of_day), labels = paste(round(mean(df$time_of_day), 2), ' or ' ,
round(mean(df$time_of_day) / 60, 0), ':',
round(mean(df$time_of_day) %% 60, 0), sep = ""), col = "red")
# Calculate quantiles
quantiles <- quantile(df$time_of_day, probs = c(0.25, 0.75))
# Add quantiles to the boxplot
segments(0.8, quantiles[1], 1.2, quantiles[1], col = "blue")
segments(0.8, quantiles[2], 1.2, quantiles[2], col = "blue")
# Annotate quantiles
text(1.28, quantiles[1], labels = paste(round(quantiles[1], 2), ' or ' ,
round(quantiles[1] / 60, 0), ':',
round(quantiles[1] %% 60, 0), sep = ""), col = "blue")
text(1.28, quantiles[2], labels = paste(round(quantiles[2], 2), ' or ',
round(quantiles[2] / 60, 0), ':',
sprintf("%02d", as.integer(quantiles[2] %% 60)), sep = ""), col = "blue")
df$non_neg_delay <- ifelse(df$delay_mins < 0, 0, df$delay_mins)
df$non_neg_delay <- ifelse(df$delay_mins < 0, 0, df$delay_mins)
boxplot(df$non_neg_delay,
main = "Distribution of the delay time (mins)",
ylab = "delay (mins)")
# Add the mean to the boxplot
points(1, mean(df$non_neg_delay), col = "red", pch = 19)
text(1.04, mean(df$non_neg_delay), labels = paste(round(mean(df$non_neg_delay), 2),  sep = ""), col = "red")
# determined minimum and maximum values
#min_value <- min(df$non_neg_delay, na.rm = TRUE)
max_value <- max(df$non_neg_delay, na.rm = TRUE)
# Add the maximum point
points(1, max_value, col = "darkgreen", pch = 19)
text(1.05, max_value, labels = round(max_value, 2), col = "darkgreen")
quantiles <- quantile(df$non_neg_delay, probs = c(0.25, 0.75))
# Annotate quantiles
text(1.24, quantiles[1], labels = round(quantiles[1], 2), col = "blue")
text(1.24, quantiles[2], labels = round(quantiles[2], 2), col = "darkgreen")
## Direction column vs delay time
boxplot(non_neg_delay ~  direction, data = df, family='binomial')
df$non_neg_delay <- ifelse(df$delay_mins < 0, 0, df$delay_mins)
boxplot(df$non_neg_delay,
main = "Distribution of the delay time (mins)",
ylab = "delay (mins)")
# Add the mean to the boxplot
points(1, mean(df$non_neg_delay), col = "red", pch = 19)
text(1.04, mean(df$non_neg_delay), labels = paste(round(mean(df$non_neg_delay), 2),  sep = ""), col = "red")
# determined minimum and maximum values
#min_value <- min(df$non_neg_delay, na.rm = TRUE)
max_value <- max(df$non_neg_delay, na.rm = TRUE)
# Add the maximum point
points(1, max_value, col = "darkgreen", pch = 19)
text(1.05, max_value, labels = round(max_value, 2), col = "darkgreen")
quantiles <- quantile(df$non_neg_delay, probs = c(0.25, 0.75))
# Annotate quantiles
text(1.24, quantiles[1], labels = round(quantiles[1], 2), col = "blue")
text(1.24, quantiles[2], labels = round(quantiles[2], 2), col = "darkgreen")
## Direction column vs delay time
boxplot(non_neg_delay ~  direction, data = df, family='binomial')
df$non_neg_delay <- ifelse(df$delay_mins < 0, 0, df$delay_mins)
boxplot(df$non_neg_delay,
main = "Distribution of the delay time (mins)",
ylab = "delay (mins)")
# Add the mean to the boxplot
points(1, mean(df$non_neg_delay), col = "red", pch = 19)
df$non_neg_delay <- ifelse(df$delay_mins < 0, 0, df$delay_mins)
boxplot(df$non_neg_delay,
main = "Distribution of the delay time (mins)",
ylab = "delay (mins)")
# Add the mean to the boxplot
points(1, mean(df$non_neg_delay), col = "red", pch = 19)
text(1.04, mean(df$non_neg_delay), labels = paste(round(mean(df$non_neg_delay), 2),  sep = ""), col = "red")
# determined minimum and maximum values
#min_value <- min(df$non_neg_delay, na.rm = TRUE)
max_value <- max(df$non_neg_delay, na.rm = TRUE)
# Add the maximum point
points(1, max_value, col = "darkgreen", pch = 19)
text(1.05, max_value, labels = round(max_value, 2), col = "darkgreen")
quantiles <- quantile(df$non_neg_delay, probs = c(0.25, 0.75))
# Annotate quantiles
text(1.24, quantiles[1], labels = round(quantiles[1], 2), col = "blue")
text(1.24, quantiles[2], labels = round(quantiles[2], 2), col = "darkgreen")
text(1.24, quantiles[2], labels = round(quantiles[2], 2), col = "darkgreen")
## Direction column vs delay time
boxplot(non_neg_delay ~  direction, data = df, family='binomial')
## Direction column vs delay time
boxplot(non_neg_delay ~  direction, data = df, family='binomial')
## Direction column vs delay time
boxplot(non_neg_delay ~  direction, data = df, family='binomial')
## Direction column vs delay time
boxplot(non_neg_delay ~  direction, data = df, family='binomial')
df_nnd_line <- df %>%
group_by(line_name) %>%
summarise(
count = n(),
mean_delay = mean(non_neg_delay, na.rm = TRUE)) %>%
arrange(desc(mean_delay))
df_nnd_line <- df %>%
group_by(line_name) %>%
summarise(
count = n(),
mean_delay = mean(non_neg_delay, na.rm = TRUE)) %>%
arrange(desc(mean_delay))
df_nnd_line <- df %>%
group_by(line_name) %>%
summarise(
count = n(),
mean_delay = mean(non_neg_delay, na.rm = TRUE)) %>%
arrange(desc(mean_delay))
head(df_nnd_line)
# Calculate the average count
average_count <- mean(df_nnd_line$count)
# Filter out lines with count less than the average count
df_nnd_line_aa <- df_nnd_line %>%
filter(count >= average_count)
cat("There are a total number of ", nrow(df_nnd_line_aa),
" obersvation which has frequncy above to the avg. frequency", sep = "")
# Set the factor levels of line_name in the order of the dataframe
df_nnd_line_aa$line_name <- factor(df_nnd_line_aa$line_name, levels = df_nnd_line_aa$line_name)
# Identify the maximum and minimum mean_delay
max_delay <- df_nnd_line_aa[which.max(df_nnd_line_aa$mean_delay), ]
min_delay <- df_nnd_line_aa[which.min(df_nnd_line_aa$mean_delay), ]
ggplot(df_nnd_line_aa, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Filter out lines with count greater than the average count
df_nnd_line_ba <- df_nnd_line %>%
filter(count < average_count)
cat("There are a total number of ", nrow(df_nnd_line_ba),
" obersvation which has frequncy above to the avg. frequency", sep = "")
# Set the factor levels of line_name in the order of the dataframe
df_nnd_line_ba$line_name <- factor(df_nnd_line_ba$line_name, levels = df_nnd_line_ba$line_name)
# Identify the maximum and minimum mean_delay
max_delay <- df_nnd_line_ba[which.max(df_nnd_line_ba$mean_delay), ]
min_delay <- df_nnd_line_ba[which.min(df_nnd_line_ba$mean_delay), ]
# Assuming df_nnd_line is already created as per your description
ggplot(df_nnd_line_ba, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(df_nnd_line_aa, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df_nnd_line <- df %>%
group_by(line_name) %>%
summarise(
count = n(),
mean_delay = mean(non_neg_delay, na.rm = TRUE)) %>%
arrange(desc(mean_delay))
head(df_nnd_line)
# Calculate the average count
average_count <- mean(df_nnd_line$count)
# Filter out lines with count less than the average count
df_nnd_line_aa <- df_nnd_line %>%
filter(count >= average_count)
cat("There are a total number of ", nrow(df_nnd_line_aa),
" obersvation which has frequncy above to the avg. frequency", sep = "")
# Set the factor levels of line_name in the order of the dataframe
df_nnd_line_aa$line_name <- factor(df_nnd_line_aa$line_name, levels = df_nnd_line_aa$line_name)
# Identify the maximum and minimum mean_delay
max_delay <- df_nnd_line_aa[which.max(df_nnd_line_aa$mean_delay), ]
min_delay <- df_nnd_line_aa[which.min(df_nnd_line_aa$mean_delay), ]
ggplot(df_nnd_line_aa, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Filter out lines with count greater than the average count
df_nnd_line_ba <- df_nnd_line %>%
filter(count < average_count)
cat("There are a total number of ", nrow(df_nnd_line_ba),
" obersvation which has frequncy above to the avg. frequency", sep = "")
# Set the factor levels of line_name in the order of the dataframe
df_nnd_line_ba$line_name <- factor(df_nnd_line_ba$line_name, levels = df_nnd_line_ba$line_name)
# Identify the maximum and minimum mean_delay
max_delay <- df_nnd_line_ba[which.max(df_nnd_line_ba$mean_delay), ]
min_delay <- df_nnd_line_ba[which.min(df_nnd_line_ba$mean_delay), ]
# Assuming df_nnd_line is already created as per your description
ggplot(df_nnd_line_ba, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df_nnd_line <- df %>%
group_by(line_name) %>%
summarise(
count = n(),
mean_delay = mean(non_neg_delay, na.rm = TRUE)) %>%
arrange(desc(mean_delay))
head(df_nnd_line)
# Calculate the average count
average_count <- mean(df_nnd_line$count)
# Filter out lines with count less than the average count
df_nnd_line_aa <- df_nnd_line %>%
filter(count >= average_count)
cat("There are a total number of ", nrow(df_nnd_line_aa),
" obersvation which has frequncy above to the avg. frequency", sep = "")
# Set the factor levels of line_name in the order of the dataframe
df_nnd_line_aa$line_name <- factor(df_nnd_line_aa$line_name, levels = df_nnd_line_aa$line_name)
# Identify the maximum and minimum mean_delay
max_delay <- df_nnd_line_aa[which.max(df_nnd_line_aa$mean_delay), ]
min_delay <- df_nnd_line_aa[which.min(df_nnd_line_aa$mean_delay), ]
ggplot(df_nnd_line_aa, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(df_nnd_line_aa, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Filter out lines with count greater than the average count
df_nnd_line_ba <- df_nnd_line %>%
filter(count < average_count)
cat("There are a total number of ", nrow(df_nnd_line_ba),
" obersvation which has frequncy above to the avg. frequency", sep = "")
# Set the factor levels of line_name in the order of the dataframe
df_nnd_line_ba$line_name <- factor(df_nnd_line_ba$line_name, levels = df_nnd_line_ba$line_name)
# Identify the maximum and minimum mean_delay
max_delay <- df_nnd_line_ba[which.max(df_nnd_line_ba$mean_delay), ]
min_delay <- df_nnd_line_ba[which.min(df_nnd_line_ba$mean_delay), ]
# Assuming df_nnd_line is already created as per your description
ggplot(df_nnd_line_ba, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
## Weekend column vs delay time
boxplot(non_neg_delay ~  weekend_status, data = df, family='binomial')
df_nnd_line <- df %>%
group_by(line_name) %>%
summarise(
count = n(),
mean_delay = mean(non_neg_delay, na.rm = TRUE)) %>%
arrange(desc(mean_delay))
head(df_nnd_line)
# Calculate the average count
average_count <- mean(df_nnd_line$count)
# Filter out lines with count less than the average count
df_nnd_line_aa <- df_nnd_line %>%
filter(count >= average_count)
cat("There are a total number of ", nrow(df_nnd_line_aa),
" obersvation which has frequncy above to the avg. frequency", sep = "")
# Set the factor levels of line_name in the order of the dataframe
df_nnd_line_aa$line_name <- factor(df_nnd_line_aa$line_name, levels = df_nnd_line_aa$line_name)
# Identify the maximum and minimum mean_delay
max_delay <- df_nnd_line_aa[which.max(df_nnd_line_aa$mean_delay), ]
min_delay <- df_nnd_line_aa[which.min(df_nnd_line_aa$mean_delay), ]
ggplot(df_nnd_line_aa, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
min_delay <- df_nnd_line_aa[which.min(df_nnd_line_aa$mean_delay), ]
ggplot(df_nnd_line_aa, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Filter out lines with count greater than the average count
df_nnd_line_ba <- df_nnd_line %>%
filter(count < average_count)
cat("There are a total number of ", nrow(df_nnd_line_ba),
" obersvation which has frequncy above to the avg. frequency", sep = "")
# Set the factor levels of line_name in the order of the dataframe
df_nnd_line_ba$line_name <- factor(df_nnd_line_ba$line_name, levels = df_nnd_line_ba$line_name)
# Identify the maximum and minimum mean_delay
max_delay <- df_nnd_line_ba[which.max(df_nnd_line_ba$mean_delay), ]
min_delay <- df_nnd_line_ba[which.min(df_nnd_line_ba$mean_delay), ]
# Assuming df_nnd_line is already created as per your description
ggplot(df_nnd_line_ba, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df_nnd_line <- df %>%
group_by(line_name) %>%
summarise(
count = n(),
mean_delay = mean(non_neg_delay, na.rm = TRUE)) %>%
arrange(desc(mean_delay))
head(df_nnd_line)
# Calculate the average count
average_count <- mean(df_nnd_line$count)
# Filter out lines with count less than the average count
df_nnd_line_aa <- df_nnd_line %>%
filter(count >= average_count)
cat("There are a total number of ", nrow(df_nnd_line_aa),
" obersvation which has frequncy above to the avg. frequency", sep = "")
# Set the factor levels of line_name in the order of the dataframe
df_nnd_line_aa$line_name <- factor(df_nnd_line_aa$line_name, levels = df_nnd_line_aa$line_name)
# Identify the maximum and minimum mean_delay
max_delay <- df_nnd_line_aa[which.max(df_nnd_line_aa$mean_delay), ]
min_delay <- df_nnd_line_aa[which.min(df_nnd_line_aa$mean_delay), ]
ggplot(df_nnd_line_aa, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Filter out lines with count greater than the average count
df_nnd_line_ba <- df_nnd_line %>%
filter(count < average_count)
cat("There are a total number of ", nrow(df_nnd_line_ba),
" obersvation which has frequncy above to the avg. frequency", sep = "")
# Set the factor levels of line_name in the order of the dataframe
df_nnd_line_ba$line_name <- factor(df_nnd_line_ba$line_name, levels = df_nnd_line_ba$line_name)
# Identify the maximum and minimum mean_delay
max_delay <- df_nnd_line_ba[which.max(df_nnd_line_ba$mean_delay), ]
min_delay <- df_nnd_line_ba[which.min(df_nnd_line_ba$mean_delay), ]
# Assuming df_nnd_line is already created as per your description
ggplot(df_nnd_line_ba, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Assuming df_nnd_line is already created as per your description
ggplot(df_nnd_line_ba, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Assuming df_nnd_line is already created as per your description
ggplot(df_nnd_line_ba, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
## Weekend column vs delay time
boxplot(non_neg_delay ~  weekend_status, data = df, family='binomial')
## Weekend column vs delay time
boxplot(non_neg_delay ~  weekend_status, data = df, family='binomial')
## day of the year column vs delay time
boxplot(non_neg_delay ~  day_of_year, data = df, family='binomial')
## day of the year column vs delay time
boxplot(non_neg_delay ~  day_of_year, data = df, family='binomial')
df$hour_of_day <- floor(df$time_of_day / 60)
## Weekend column vs delay time
boxplot(non_neg_delay ~  weekend_status, data = df, family='binomial')
## day of the year column vs delay time
boxplot(non_neg_delay ~  day_of_year, data = df, family='binomial')
df$hour_of_day <- floor(df$time_of_day / 60)
boxplot(non_neg_delay ~  hour_of_day, data = df, family='binomial')
boxplot(non_neg_delay ~  arrivial_app, data = df, family='binomial')
## day of the year column vs delay time
boxplot(non_neg_delay ~  day_of_year, data = df, family='binomial')
df$hour_of_day <- floor(df$time_of_day / 60)
boxplot(non_neg_delay ~  hour_of_day, data = df, family='binomial')
boxplot(non_neg_delay ~  arrivial_app, data = df, family='binomial')
## Weekend column vs delay time
boxplot(non_neg_delay ~  weekend_status, data = df, family='binomial')
## day of the year column vs delay time
boxplot(non_neg_delay ~  day_of_year, data = df, family='binomial')
## day of the year column vs delay time
boxplot(non_neg_delay ~  day_of_year, data = df, family='binomial')
df$hour_of_day <- floor(df$time_of_day / 60)
boxplot(non_neg_delay ~  hour_of_day, data = df, family='binomial')
boxplot(non_neg_delay ~  hour_of_day, data = df, family='binomial')
boxplot(non_neg_delay ~  arrivial_app, data = df, family='binomial')
