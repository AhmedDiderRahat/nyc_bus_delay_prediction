# Add text label for the X-axis value
text(first_index, par("usr")[3] - 1, labels = first_index, srt = 00, adj = 1, xpd = TRUE, col = "darkblue")
}
# destination name table
tab_dname <- table(df$dest_name)
# Convert to dataframe for plotting
df_dest_name <- as.data.frame(tab_dname)
head(df_dest_name)
# Rename the columns
names(df_dest_name) <- c("destination_name", "count")
# sort using count
df_dest_name <- df_dest_name[order(-df_dest_name$count), ]
# Reset the row names
rownames(df_dest_name) <- NULL
# Get total unique destination name
cat("Total unique destination name:", (nrow(df_dest_name)), "\n")
# Get average count of each destination name
avg_dest_count <- mean(df_dest_name$count)
cat("Average line counts:", avg_dest_count, "\n")
# get top 20 destination name
top_dest_df <- df_dest_name[1:20, ]
# visualize top-20 destination name
ggplot(top_dest_df, aes(x = reorder(destination_name, -count), y = count, fill = destination_name)) +
geom_bar(stat = "identity") +
labs(title = "Top 20 Destination/End Station Names by Count", x = "Destination Name", y = "Count") +
theme(axis.text.x = element_text(angle = 70, hjust = 1),  # Rotate x labels for readability
legend.position = "none")  # Remove the legend
# calculate the percentage of top-20 frequent destination name
top_dest_count_percentage <- sum(top_dest_df$count) / sum(df_dest_name$count) * 100
cat("Top 20 line's frequency percentage:", top_dest_count_percentage, "%\n")
# visualize the counts of each origin with respect to their indices
plot(df_dest_name$count,
xlab = "Destination Number",
ylab = "Count",
main = "Distribution of Counts")
# Add a horizontal green line at the mean count
abline(h = avg_dest_count, col = "darkgreen", lwd = 2)
# Find the first index where count is less than the average
first_index <- which(df_dest_name$count < avg_dest_count)[1]
# Add 'X' mark at the first such index on the average line
if (!is.na(first_index)) {
points(first_index, avg_dest_count, pch = "X", col = "darkorange", lwd = 3)
# Add a dashed vertical line through the 'X' point
abline(v = first_index, lty = "dashed", col = "darkred", lwd=2)
# Add text label for the X-axis value
text(first_index, par("usr")[3] - 1, labels = first_index, srt = 00, adj = 1, xpd = TRUE, col = "darkblue")
}
library(maps)
# init map object for NYC
nyc_map <- map_data("state", region = "new york")
# Aggregate the data to count the frequency of each route
df_aggregated <- df %>%
group_by(org_long, org_lat, dest_long, dest_lat) %>%
summarize(count = n())
# Determine the range of longitude and latitude for the routes area
# You may need to adjust these values based on your specific data
x_min <- min(df_aggregated$org_long, df_aggregated$dest_long) - 0.05
x_max <- max(df_aggregated$org_long, df_aggregated$dest_long) + 0.05
y_min <- min(df_aggregated$org_lat, df_aggregated$dest_lat) - 0.05
y_max <- max(df_aggregated$org_lat, df_aggregated$dest_lat) + 0.05
# Create a ggplot using the aggregated data
ggplot() +
geom_polygon(data = nyc_map, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_segment(data = df_aggregated, aes(x = org_long,
y = org_lat,
xend = dest_long,
yend = dest_lat,
color = count), size = 2) +
scale_color_gradient(low = "blue", high = "red", guide = "legend") +
coord_fixed(1.3) +
labs(x = "Longitude", y = "Latitude", title = "Routes in NYC and their counts") +
xlim(x_min, x_max) +
ylim(y_min, y_max)
# vehicle name table
tab_vname <- table(df$vech_name)
# Convert to dataframe for plotting
df_vehicle_name <- as.data.frame(tab_vname)
head(df_vehicle_name)
# Rename the columns
names(df_vehicle_name) <- c("vehicle_name", "count")
# sort using count
df_vehicle_name <- df_vehicle_name[order(-df_vehicle_name$count), ]
# Reset the row names
rownames(df_vehicle_name) <- NULL
# Get total unique vehicle name
cat("Total unique vehicle name:", (nrow(df_vehicle_name)), "\n")
# Get average count of each vehicle name
avg_vehicle_count <- mean(df_vehicle_name$count)
cat("Average line counts:", avg_vehicle_count, "\n")
# get top 20 vehicle name
(top_vehicle_df <- df_vehicle_name[1:20, ])
# visualize top-20 vehicle name
ggplot(top_vehicle_df, aes(x = reorder(vehicle_name, -count), y = count, fill = vehicle_name)) +
geom_bar(stat = "identity") +
labs(title = "Top 20 Vehicle Name by Count", x = "Origin Name", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x labels for readability
legend.position = "none")  # Remove the legend
# calculate the percentage of top-20 frequent vehicle name
top_vehicle_count_percentage <- sum(top_vehicle_df$count) / sum(df_vehicle_name$count) * 100
cat("Top 20 vehicle's frequency percentage:", top_vehicle_count_percentage, "%\n")
# visualize the counts of each origin with respect to their indices
plot(df_vehicle_name$count,
xlab = "Vehicle Number",
ylab = "Count",
main = "Distribution of Counts")
# Add a horizontal green line at the mean count
abline(h = avg_vehicle_count, col = "darkgreen", lwd = 2)
# Find the first index where count is less than the average
first_index <- which(df_vehicle_name$count < avg_vehicle_count)[1]
# Add 'X' mark at the first such index on the average line
if (!is.na(first_index)) {
points(first_index, avg_vehicle_count, pch = "X", col = "darkorange", lwd = 3)
# Add a dashed vertical line through the 'X' point
abline(v = first_index, lty = "dashed", col = "darkred", lwd=2)
# Calculate the y-position for the text label
y_position <- par("usr")[3] - 0.15
x_position = first_index + 20
# Add text label for the X-axis value
text(x_position, y_position, labels = first_index, srt = 00, adj = 1, xpd = TRUE, col = "darkblue")
}
# weekend status table
tab_ws <- table(df$weekend_status)
# Convert to dataframe for plotting
df_ws <- as.data.frame(tab_ws)
head(df_ws)
# Rename the columns
names(df_ws) <- c("weekend_status", "count")
# sort using count
df_ws <- df_ws[order(-df_ws$count), ]
# Reset the row names
rownames(df_ws) <- NULL
# Calculate the percentage for each group
df_ws <- df_ws %>%
group_by(weekend_status) %>%
summarise(total_count = sum(count)) %>%
mutate(percentage = (total_count / sum(total_count)) * 100)
# Create the bar plot with percentage labels
ggplot(df_ws, aes(x = reorder(weekend_status, -percentage), y = total_count, fill = weekend_status)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(percentage, 2), "%")), vjust = -0.5, size = 4) +  # Add percentage labels
labs(title = "Distribution of Weekend Status by Count and Percentage",
x = "Origin Name",
y = "Count") +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5),  # Reset X-axis text position to default
legend.position = "none")  # Remove the legend
boxplot(df$day_of_year,
main = "Distribution of Day of the Year",
ylab = "day of year")
# Add the mean to the boxplot
points(1, mean(df$day_of_year), col = "red", pch = 19)
text(1.05, mean(df$day_of_year), labels = round(mean(df$day_of_year), 2), col = "red")
# Calculate quantiles
quantiles <- quantile(df$day_of_year, probs = c(0.25, 0.75))
# Add quantiles to the boxplot
segments(0.8, quantiles[1], 1.2, quantiles[1], col = "blue")
segments(0.8, quantiles[2], 1.2, quantiles[2], col = "blue")
# Annotate quantiles
text(1.25, quantiles[1], labels = round(quantiles[1], 2), col = "blue")
text(1.25, quantiles[2], labels = round(quantiles[2], 2), col = "blue")
boxplot(df$time_of_day,
main = "Distribution of time of the day",
ylab = "day of year")
# Add the mean to the boxplot
points(1, mean(df$time_of_day), col = "red", pch = 19)
text(1.09, mean(df$time_of_day), labels = paste(round(mean(df$time_of_day), 2), ' or ' ,
round(mean(df$time_of_day) / 60, 0), ':',
round(mean(df$time_of_day) %% 60, 0), sep = ""), col = "red")
# Calculate quantiles
quantiles <- quantile(df$time_of_day, probs = c(0.25, 0.75))
# Add quantiles to the boxplot
segments(0.8, quantiles[1], 1.2, quantiles[1], col = "blue")
segments(0.8, quantiles[2], 1.2, quantiles[2], col = "blue")
# Annotate quantiles
text(1.28, quantiles[1], labels = paste(round(quantiles[1], 2), ' or ' ,
round(quantiles[1] / 60, 0), ':',
round(quantiles[1] %% 60, 0), sep = ""), col = "blue")
text(1.28, quantiles[2], labels = paste(round(quantiles[2], 2), ' or ',
round(quantiles[2] / 60, 0), ':',
sprintf("%02d", as.integer(quantiles[2] %% 60)), sep = ""), col = "blue")
df$non_neg_delay <- ifelse(df$delay_mins < 0, 0, df$delay_mins)
boxplot(df$non_neg_delay,
main = "Distribution of the delay time (mins)",
ylab = "delay (mins)")
# Add the mean to the boxplot
points(1, mean(df$non_neg_delay), col = "red", pch = 19)
text(1.04, mean(df$non_neg_delay), labels = paste(round(mean(df$non_neg_delay), 2),  sep = ""), col = "red")
# determined minimum and maximum values
#min_value <- min(df$non_neg_delay, na.rm = TRUE)
max_value <- max(df$non_neg_delay, na.rm = TRUE)
# Add the maximum point
points(1, max_value, col = "darkgreen", pch = 19)
text(1.05, max_value, labels = round(max_value, 2), col = "darkgreen")
quantiles <- quantile(df$non_neg_delay, probs = c(0.25, 0.75))
# Annotate quantiles
text(1.24, quantiles[1], labels = round(quantiles[1], 2), col = "blue")
text(1.24, quantiles[2], labels = round(quantiles[2], 2), col = "darkgreen")
## Direction column vs delay time
boxplot(non_neg_delay ~  direction, data = df, family='binomial',
main = "Boxplot of Delay Time by Direction")
df_nnd_line <- df %>%
group_by(line_name) %>%
summarise(
count = n(),
mean_delay = mean(non_neg_delay, na.rm = TRUE)) %>%
arrange(desc(mean_delay))
head(df_nnd_line)
# Calculate the average count
average_count <- mean(df_nnd_line$count)
# Filter out lines with count less than the average count
df_nnd_line_aa <- df_nnd_line %>%
filter(count >= average_count)
cat("There are a total number of ", nrow(df_nnd_line_aa),
" obersvation which has frequncy above to the avg. frequency", sep = "")
# Set the factor levels of line_name in the order of the dataframe
df_nnd_line_aa$line_name <- factor(df_nnd_line_aa$line_name, levels = df_nnd_line_aa$line_name)
# Identify the maximum and minimum mean_delay
max_delay <- df_nnd_line_aa[which.max(df_nnd_line_aa$mean_delay), ]
min_delay <- df_nnd_line_aa[which.min(df_nnd_line_aa$mean_delay), ]
ggplot(df_nnd_line_aa, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 0.5), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Filter out lines with count greater than the average count
df_nnd_line_ba <- df_nnd_line %>%
filter(count < average_count)
cat("There are a total number of ", nrow(df_nnd_line_ba),
" obersvation which has frequncy below to the avg. frequency", sep = "")
# Set the factor levels of line_name in the order of the dataframe
df_nnd_line_ba$line_name <- factor(df_nnd_line_ba$line_name, levels = df_nnd_line_ba$line_name)
# Identify the maximum and minimum mean_delay
max_delay <- df_nnd_line_ba[which.max(df_nnd_line_ba$mean_delay), ]
min_delay <- df_nnd_line_ba[which.min(df_nnd_line_ba$mean_delay), ]
# Assuming df_nnd_line is already created as per your description
ggplot(df_nnd_line_ba, aes(x = line_name, y = mean_delay, fill = count)) +
geom_bar(stat = "identity") +
geom_text(data = max_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), hjust= 0.15, vjust = 1) +
geom_text(data = min_delay, aes(label = round(mean_delay, 2), y = mean_delay + 1.0), vjust = 1) +
labs(x = "Line Name", y = "Mean Delay", fill = "Count") +
scale_fill_gradient(low = "blue", high = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
## Weekend column vs delay time
boxplot(non_neg_delay ~  weekend_status, data = df, family='binomial',
main = "Boxplot of Delay Time by Weekend Status")
## day of the year column vs delay time
boxplot(non_neg_delay ~  day_of_year, data = df, family='binomial',
main = "Boxplot of delay in different day of year")
df$hour_of_day <- floor(df$time_of_day / 60)
boxplot(non_neg_delay ~  hour_of_day, data = df, family='binomial',
main = "Boxplot of delay in different time of the day")
df$hour_of_day <- NULL
names(df)
df$delay_mins <- NULL
names(df)
df$org_lat <- NULL
df$org_long <- NULL
df$dest_lat <- NULL
df$dest_long <- NULL
df$vech_lat <- NULL
df$vech_long <- NULL
df$next_point_name <- NULL
df$arrivial_app <- NULL
df$dist_from_stop <- NULL
names(df)
# clear environment
rm(list = ls(all.names = TRUE))
# add the library
library(dplyr)
library(ggplot2)
library(lubridate)
library(glmnet)
getwd()
# read data in csv file
train_df <- read.csv(paste("", "dataset/nyc_ds_train.csv", sep=""))
head(train_df)
# names of all columns
names(train_df)
str(train_df)
# unique columns of each column
unique_counts <- sapply(train_df, function(x) length(unique(x)))
as.data.frame((unique_counts))
# Line name conversion
line_df <- train_df %>%
group_by(line_name) %>%
summarise(mean_value = mean(non_neg_delay, na.rm = TRUE))
# origin name conversion
origin_df <- train_df %>%
group_by(org_name) %>%
summarise(mean_value = mean(non_neg_delay, na.rm = TRUE))
# destination name conversion
destination_df <- train_df %>%
group_by(dest_name) %>%
summarise(mean_value = mean(non_neg_delay, na.rm = TRUE))
# vehicle name conversion
vehiclel_df <- train_df %>%
group_by(vech_name) %>%
summarise(mean_value = mean(non_neg_delay, na.rm = TRUE))
# directly copy the direction column
trainX <- data.frame(direction = train_df$direction)
# add the numeric values of line_name to the dataframe
trainX$line_name <- merge(train_df, line_df, by = "line_name")[, "mean_value"]
# add the numeric values of org_name to the dataframe
trainX$org_name <- merge(train_df, origin_df, by = "org_name")[, "mean_value"]
# add the numeric values of dest_name to the dataframe
trainX$dest_name <- merge(train_df, destination_df, by = "dest_name")[, "mean_value"]
# add the numeric values of vech_name to the dataframe
trainX$vech_name <- merge(train_df, vehiclel_df, by = "vech_name")[, "mean_value"]
trainX[c("weekend_status",
"day_of_year",
"time_of_day")] <- train_df[c("weekend_status",
"day_of_year",
"time_of_day")]
head(trainX)
# directly copy the predicted column
trainY <- data.frame(non_neg_delay = train_df$non_neg_delay)
# read data in csv file
test_df <- read.csv(paste(root_rahat_dir, "dataset/nyc_ds_test.csv", sep=""))
# read data in csv file
test_df <- read.csv(paste("", "dataset/nyc_ds_test.csv", sep=""))
# directly copy the direction column
testX <- data.frame(direction = test_df$direction)
head(testX)
# Convert the line name values
mean_df_line <- mean(line_df$mean_value)
mean_df_line
# Example of creating a named vector for mapping
line_name_to_value <- setNames(line_df$mean_value, line_df$line_name)
# Create test_line as a vector
test_line <- sapply(test_df$line_name, function(name) {
if (!(name %in% line_df$line_name)) {
return(mean_df_line)
} else {
# Get the value from line_df corresponding to the name
# Assuming you want some other value associated with this line name
value_for_name <- line_df$mean_value[line_df$line_name == name]
return(value_for_name)
}
})
testX$line_name <- test_line
head(testX)
# Convert the origin name name
mean_df_org <- mean(origin_df$mean_value)
# Create org_name as a vector
test_origin <- sapply(test_df$org_name, function(name) {
if (!(name %in% origin_df$org_name)) {
return(mean_df_org)
} else {
value_for_name <- origin_df$mean_value[origin_df$org_name == name]
return(value_for_name)
}
})
testX$org_name <- test_origin
# Convert the destination name
mean_df_dest <- mean(destination_df$mean_value)
# Create org_name as a vector
test_dest <- sapply(test_df$dest_name, function(name) {
if (!(name %in% destination_df$dest_name)) {
return(mean_df_dest)
} else {
value_for_name <- destination_df$mean_value[destination_df$dest_name == name]
return(value_for_name)
}
})
testX$dest_name <- test_dest
# Convert the vehicle name
mean_df_vech <- mean(vehiclel_df$mean_value)
# Create org_name as a vector
test_vech <- sapply(test_df$vech_name, function(name) {
if (!(name %in% vehiclel_df$vech_name)) {
return(mean_df_vech)
} else {
value_for_name <- vehiclel_df$mean_value[vehiclel_df$vech_name == name]
return(value_for_name)
}
})
testX$vech_name <- test_dest
head(testX)
# copy other numeric columns
testX[c("weekend_status",
"day_of_year",
"time_of_day")] <- test_df[c("weekend_status",
"day_of_year",
"time_of_day")]
head(trainX)
# directly copy the predicted column
testY <- data.frame(non_neg_delay = test_df$non_neg_delay)
head(trainX)
head(train_df)
# read data in csv file
test_df <- read.csv(paste("", "dataset/nyc_ds_test.csv", sep=""))
head(test_df)
head(testX)
# clear environment
rm(list = ls(all.names = TRUE))
# add the library
library(dplyr)
library(ggplot2)
library(lubridate)
library(glmnet)
root_rahat_dir <- "Desktop/ADR/ML-2/projects/nyc_bus_delay_prediction/"
# read data in csv file
train_df <- read.csv(paste("", "dataset/nyc_ds_train.csv", sep=""))
head(train_df)
# names of all columns
names(train_df)
str(train_df)
# unique columns of each column
unique_counts <- sapply(train_df, function(x) length(unique(x)))
as.data.frame((unique_counts))
# Line name conversion
line_df <- train_df %>%
group_by(line_name) %>%
summarise(mean_value = mean(non_neg_delay, na.rm = TRUE))
# origin name conversion
origin_df <- train_df %>%
group_by(org_name) %>%
summarise(mean_value = mean(non_neg_delay, na.rm = TRUE))
# destination name conversion
destination_df <- train_df %>%
group_by(dest_name) %>%
summarise(mean_value = mean(non_neg_delay, na.rm = TRUE))
# vehicle name conversion
vehiclel_df <- train_df %>%
group_by(vech_name) %>%
summarise(mean_value = mean(non_neg_delay, na.rm = TRUE))
# directly copy the direction column
trainX <- data.frame(direction = train_df$direction)
# add the numeric values of line_name to the dataframe
trainX$line_name <- merge(train_df, line_df, by = "line_name")[, "mean_value"]
# add the numeric values of org_name to the dataframe
trainX$org_name <- merge(train_df, origin_df, by = "org_name")[, "mean_value"]
# add the numeric values of dest_name to the dataframe
trainX$dest_name <- merge(train_df, destination_df, by = "dest_name")[, "mean_value"]
# add the numeric values of vech_name to the dataframe
trainX$vech_name <- merge(train_df, vehiclel_df, by = "vech_name")[, "mean_value"]
trainX[c("weekend_status",
"day_of_year",
"time_of_day")] <- train_df[c("weekend_status",
"day_of_year",
"time_of_day")]
head(trainX)
# directly copy the predicted column
trainY <- data.frame(non_neg_delay = train_df$non_neg_delay)
# read data in csv file
test_df <- read.csv(paste("", "dataset/nyc_ds_test.csv", sep=""))
# directly copy the direction column
testX <- data.frame(direction = test_df$direction)
head(testX)
# Convert the line name values
mean_df_line <- mean(line_df$mean_value)
mean_df_line
# Example of creating a named vector for mapping
line_name_to_value <- setNames(line_df$mean_value, line_df$line_name)
# Create test_line as a vector
test_line <- sapply(test_df$line_name, function(name) {
if (!(name %in% line_df$line_name)) {
return(mean_df_line)
} else {
# Get the value from line_df corresponding to the name
# Assuming you want some other value associated with this line name
value_for_name <- line_df$mean_value[line_df$line_name == name]
return(value_for_name)
}
})
testX$line_name <- test_line
head(testX)
# Convert the origin name name
mean_df_org <- mean(origin_df$mean_value)
# Create org_name as a vector
test_origin <- sapply(test_df$org_name, function(name) {
if (!(name %in% origin_df$org_name)) {
return(mean_df_org)
} else {
value_for_name <- origin_df$mean_value[origin_df$org_name == name]
return(value_for_name)
}
})
testX$org_name <- test_origin
# Convert the destination name
mean_df_dest <- mean(destination_df$mean_value)
# Create org_name as a vector
test_dest <- sapply(test_df$dest_name, function(name) {
if (!(name %in% destination_df$dest_name)) {
return(mean_df_dest)
} else {
value_for_name <- destination_df$mean_value[destination_df$dest_name == name]
return(value_for_name)
}
})
testX$dest_name <- test_dest
# Convert the vehicle name
mean_df_vech <- mean(vehiclel_df$mean_value)
# Create org_name as a vector
test_vech <- sapply(test_df$vech_name, function(name) {
if (!(name %in% vehiclel_df$vech_name)) {
return(mean_df_vech)
} else {
value_for_name <- vehiclel_df$mean_value[vehiclel_df$vech_name == name]
return(value_for_name)
}
})
testX$vech_name <- test_dest
head(testX)
# copy other numeric columns
testX[c("weekend_status",
"day_of_year",
"time_of_day")] <- test_df[c("weekend_status",
"day_of_year",
"time_of_day")]
head(testX)
